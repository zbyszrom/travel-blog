{"version":3,"sources":["../../../src/schema/infer/example-value.js"],"names":["_","require","is32BitInteger","isDate","getExampleValue","nodes","typeName","typeConflictReporter","ignoreFields","exampleValue","getExampleObject","prefix","module","exports","allKeys","reduce","acc","node","Object","keys","forEach","key","includes","add","Set","Array","from","entries","map","value","type","getType","parent","filter","Boolean","selector","entriesByType","uniqBy","entry","length","arrayWrappers","isArray","isMixOfDatesAndStrings","allNonEmptyStringsAreDates","every","values","flatMap","addConflict","exampleFieldValue","isObject","isRegExp","objects","arrays","concat","exampleObject","findFloat","types","startsWith","slice","split","t","replace","size","has","result","find","numbers","some","number","Date","String","uniqueValues","uniq","v","join"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst is32BitInteger = require(`./is-32-bit-integer`)\nconst { isDate } = require(`../types/date`)\n\nconst getExampleValue = ({\n  nodes,\n  typeName,\n  typeConflictReporter,\n  ignoreFields,\n}) => {\n  const exampleValue = getExampleObject({\n    nodes,\n    prefix: typeName,\n    typeConflictReporter,\n    ignoreFields,\n  })\n  return exampleValue\n}\n\nmodule.exports = {\n  getExampleValue,\n}\n\nconst getExampleObject = ({\n  nodes,\n  prefix,\n  typeConflictReporter,\n  ignoreFields = [],\n}) => {\n  const allKeys = nodes.reduce(\n    (acc, node) =>\n      Object.keys(node).forEach(\n        key => key && !ignoreFields.includes(key) && acc.add(key)\n      ) || acc,\n    new Set()\n  )\n\n  const exampleValue = Array.from(allKeys).reduce((acc, key) => {\n    const entries = nodes\n      .map(node => {\n        const value = node[key]\n        const type = getType(value)\n        return type && { value, type, parent: node }\n      })\n      .filter(Boolean)\n\n    const selector = prefix ? `${prefix}.${key}` : key\n\n    const entriesByType = _.uniqBy(entries, entry => entry.type)\n    if (!entriesByType.length) return acc\n\n    // TODO: This whole thing could be prettier!\n    let { value, type } = entriesByType[0]\n    let arrayWrappers = 0\n    while (Array.isArray(value)) {\n      value = value[0]\n      arrayWrappers++\n    }\n\n    if (entriesByType.length > 1 || type.includes(`,`)) {\n      if (\n        isMixOfDatesAndStrings(\n          entriesByType.map(entry => entry.type),\n          arrayWrappers\n        )\n      ) {\n        // TODO: Possibly revisit this in Gatsby v3.\n        const allNonEmptyStringsAreDates = entries.every(entry => {\n          const values = Array.isArray(entry.value)\n            ? _.flatMap(entry.value)\n            : [entry.value]\n          return values.every(\n            value => value === `` || getType(value) === `date`\n          )\n        })\n        if (allNonEmptyStringsAreDates) {\n          value = `1978-09-26`\n        } else {\n          value = `String`\n        }\n      } else {\n        typeConflictReporter.addConflict(selector, entriesByType)\n        return acc\n      }\n    }\n\n    let exampleFieldValue\n    if (\n      _.isObject(value) &&\n      !_.isArray(value) &&\n      !_.isDate(value) &&\n      !_.isRegExp(value)\n    ) {\n      const objects = entries.reduce((acc, entry) => {\n        let { value } = entry\n        let arrays = arrayWrappers - 1\n        while (arrays > 0) {\n          value = value[0]\n          arrays--\n        }\n        return acc.concat(value)\n      }, [])\n      const exampleObject = getExampleObject({\n        nodes: objects,\n        prefix: selector,\n        typeConflictReporter,\n      })\n      if (!Object.keys(exampleObject).length) return acc\n      exampleFieldValue = exampleObject\n    } else if (key.includes(`___NODE`) && arrayWrappers) {\n      // For arrays on ___NODE foreign-key fields we return all values,\n      // because the array values are allowed to link to nodes of different types.\n      // For those we will create a GraphQLUnionType later.\n      arrayWrappers--\n      exampleFieldValue = entries.reduce(\n        (acc, entry) => acc.concat(entry.value),\n        []\n      )\n    } else {\n      // FIXME: Why not simply treat every number as float (instead of looping through all values again)?\n      exampleFieldValue =\n        (typeof value === `number` && findFloat(entries)) || value\n      // exampleFieldValue = value === `number` ? 0.1 : value\n    }\n    while (arrayWrappers--) {\n      exampleFieldValue = [exampleFieldValue]\n    }\n    acc[key] = exampleFieldValue\n\n    return acc\n  }, {})\n\n  return exampleValue\n}\n\nconst isMixOfDatesAndStrings = (types, arrayWrappers) => {\n  const acc = new Set()\n  types.every(type => {\n    let arrays = arrayWrappers\n    while (arrays--) {\n      if (type.startsWith(`[`)) {\n        type = type.slice(1, -1)\n      } else {\n        return false\n      }\n    }\n    type.split(`,`).forEach(t => acc.add(t.replace(/[[]]/g, ``)))\n    return true\n  })\n  return acc.size === 2 && acc.has(`date`) && acc.has(`string`)\n}\n\nconst findFloat = entries => {\n  let result\n  const find = numbers =>\n    numbers.some(value => {\n      const number = typeof value === `object` ? value.value : value\n      return Array.isArray(number)\n        ? find(number)\n        : !is32BitInteger(number) && (result = number)\n    })\n  find(entries)\n  return result\n}\n\nconst getType = value => {\n  switch (typeof value) {\n    case `number`:\n      return `number`\n    case `string`:\n      return isDate(value) ? `date` : `string`\n    case `boolean`:\n      return `boolean`\n    case `object`:\n      if (value === null) return null\n      if (value instanceof Date) return `date`\n      if (value instanceof String) return `string`\n      if (Array.isArray(value)) {\n        const uniqueValues = _.uniq(value.map(getType).filter(v => v != null))\n        return uniqueValues.length ? `[${uniqueValues.join(`,`)}]` : null\n      }\n      if (!Object.keys(value).length) return null\n      return `object`\n    default:\n      return null\n  }\n}\n"],"file":"example-value.js"}