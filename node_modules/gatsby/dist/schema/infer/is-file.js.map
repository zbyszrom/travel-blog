{"version":3,"sources":["../../../src/schema/infer/is-file.js"],"names":["_","require","path","slash","mime","isRelative","isRelativeUrl","isFile","nodeStore","field","relativePath","filePath","getFilePath","filePathExists","getNodesByType","some","node","absolutePath","module","exports","getFirstValueAt","selector","value","get","Array","isArray","split","typeName","looksLikeFile","isAbsolute","getType","normalizedPath","find","getAbsolutePath","dir","getBaseDir","withDir","withBaseDir","map","findAncestorNode","internal","type","p","posix","join","childNode","predicate","parent","getNode"],"mappings":";;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAE,MAAF,CAApB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAE,OAAF,CAArB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAE,MAAF,CAApB;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAE,aAAF,CAA1B;;AACA,MAAMK,aAAa,GAAGL,OAAO,CAAE,iBAAF,CAA7B;;AAEA,MAAMM,MAAM,GAAG,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,YAAnB,KAAoC;AACjD,QAAMC,QAAQ,GAAGC,WAAW,CAACJ,SAAD,EAAYC,KAAZ,EAAmBC,YAAnB,CAA5B;AACA,MAAI,CAACC,QAAL,EAAe,OAAO,KAAP;AACf,QAAME,cAAc,GAAGL,SAAS,CAC7BM,cADoB,CACJ,MADI,EAEpBC,IAFoB,CAEfC,IAAI,IAAIA,IAAI,CAACC,YAAL,KAAsBN,QAFf,CAAvB;AAGA,SAAOE,cAAP;AACD,CAPD;;AASAK,MAAM,CAACC,OAAP,GAAiB;AACfZ,EAAAA;AADe,CAAjB;;AAIA,MAAMa,eAAe,GAAG,CAACJ,IAAD,EAAOK,QAAP,KAAoB;AAC1C,MAAIC,KAAK,GAAGtB,CAAC,CAACuB,GAAF,CAAMP,IAAN,EAAYK,QAAZ,CAAZ;;AACA,SAAOG,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAP,EAA6B;AAC3BA,IAAAA,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAb;AACD;;AACD,SAAOA,KAAP;AACD,CAND;;AAQA,MAAMV,WAAW,GAAG,CAACJ,SAAD,EAAYC,KAAZ,EAAmBC,YAAnB,KAAoC;AAAA,uBACtBD,KAAK,CAACiB,KAAN,CAAa,GAAb,CADsB;AAAA,QAC/CC,QAD+C;AAAA,QAClCN,QADkC;;AAGtD,MAAIM,QAAQ,KAAM,MAAlB,EAAyB,OAAO,IAAP;AAEzB,QAAMC,aAAa,GACjB,CAAC1B,IAAI,CAAC2B,UAAL,CAAgBnB,YAAhB,CAAD,IACAN,IAAI,CAAC0B,OAAL,CAAapB,YAAb,MAA+B,IAD/B,IAEA;AACAN,EAAAA,IAAI,CAAC0B,OAAL,CAAapB,YAAb,MAAgC,0BAHhC,IAIAL,UAAU,CAACK,YAAD,CAJV,IAKAJ,aAAa,CAACI,YAAD,CANf;AAQA,MAAI,CAACkB,aAAL,EAAoB,OAAO,IAAP;AAEpB,QAAMG,cAAc,GAAG5B,KAAK,CAACO,YAAD,CAA5B;AACA,QAAMM,IAAI,GAAGR,SAAS,CACnBM,cADU,CACKa,QADL,EAEVK,IAFU,CAELhB,IAAI,IAAII,eAAe,CAACJ,IAAD,EAAOK,QAAP,CAAf,KAAoCU,cAFvC,CAAb;AAIA,SAAOf,IAAI,GAAGiB,eAAe,CAACzB,SAAD,EAAYQ,IAAZ,EAAkBe,cAAlB,CAAlB,GAAsD,IAAjE;AACD,CArBD;;AAuBA,MAAME,eAAe,GAAG,CAACzB,SAAD,EAAYQ,IAAZ,EAAkBN,YAAlB,KAAmC;AACzD,QAAMwB,GAAG,GAAGC,UAAU,CAAC3B,SAAD,EAAYQ,IAAZ,CAAtB;AACA,QAAMoB,OAAO,GAAGC,WAAW,CAACH,GAAD,CAA3B;AACA,SAAOA,GAAG,GACNV,KAAK,CAACC,OAAN,CAAcf,YAAd,IACEA,YAAY,CAAC4B,GAAb,CAAiBF,OAAjB,CADF,GAEEA,OAAO,CAAC1B,YAAD,CAHH,GAIN,IAJJ;AAKD,CARD;;AAUA,MAAMyB,UAAU,GAAG,CAAC3B,SAAD,EAAYQ,IAAZ,KAAqB;AACtC,MAAIA,IAAJ,EAAU;AAAA,iBAENuB,gBAAgB,CACd/B,SADc,EAEdQ,IAFc,EAGdA,IAAI,IAAIA,IAAI,CAACwB,QAAL,CAAcC,IAAd,KAAwB,MAHlB,CAAhB,IAIK,EANC;AAAA,UACAP,GADA,QACAA,GADA;;AAOR,WAAOA,GAAP;AACD;;AACD,SAAO,IAAP;AACD,CAXD;;AAaA,MAAMG,WAAW,GAAGH,GAAG,IAAIQ,CAAC,IAAIxC,IAAI,CAACyC,KAAL,CAAWC,IAAX,CAAgBV,GAAhB,EAAqB/B,KAAK,CAACuC,CAAD,CAA1B,CAAhC;;AAEA,MAAMH,gBAAgB,GAAG,CAAC/B,SAAD,EAAYqC,SAAZ,EAAuBC,SAAvB,KAAqC;AAC5D,MAAI9B,IAAI,GAAG6B,SAAX;;AACA,KAAG;AACD,QAAIC,SAAS,CAAC9B,IAAD,CAAb,EAAqB;AACnB,aAAOA,IAAP;AACD;AACF,GAJD,QAIUA,IAAI,GAAGA,IAAI,CAAC+B,MAAL,IAAevC,SAAS,CAACwC,OAAV,CAAkBhC,IAAI,CAAC+B,MAAvB,CAJhC;;AAKA,SAAO,IAAP;AACD,CARD","sourcesContent":["const _ = require(`lodash`)\nconst path = require(`path`)\nconst slash = require(`slash`)\nconst mime = require(`mime`)\nconst isRelative = require(`is-relative`)\nconst isRelativeUrl = require(`is-relative-url`)\n\nconst isFile = (nodeStore, field, relativePath) => {\n  const filePath = getFilePath(nodeStore, field, relativePath)\n  if (!filePath) return false\n  const filePathExists = nodeStore\n    .getNodesByType(`File`)\n    .some(node => node.absolutePath === filePath)\n  return filePathExists\n}\n\nmodule.exports = {\n  isFile,\n}\n\nconst getFirstValueAt = (node, selector) => {\n  let value = _.get(node, selector)\n  while (Array.isArray(value)) {\n    value = value[0]\n  }\n  return value\n}\n\nconst getFilePath = (nodeStore, field, relativePath) => {\n  const [typeName, ...selector] = field.split(`.`)\n\n  if (typeName === `File`) return null\n\n  const looksLikeFile =\n    !path.isAbsolute(relativePath) &&\n    mime.getType(relativePath) !== null &&\n    // FIXME: Do we need all of this?\n    mime.getType(relativePath) !== `application/x-msdownload` &&\n    isRelative(relativePath) &&\n    isRelativeUrl(relativePath)\n\n  if (!looksLikeFile) return null\n\n  const normalizedPath = slash(relativePath)\n  const node = nodeStore\n    .getNodesByType(typeName)\n    .find(node => getFirstValueAt(node, selector) === normalizedPath)\n\n  return node ? getAbsolutePath(nodeStore, node, normalizedPath) : null\n}\n\nconst getAbsolutePath = (nodeStore, node, relativePath) => {\n  const dir = getBaseDir(nodeStore, node)\n  const withDir = withBaseDir(dir)\n  return dir\n    ? Array.isArray(relativePath)\n      ? relativePath.map(withDir)\n      : withDir(relativePath)\n    : null\n}\n\nconst getBaseDir = (nodeStore, node) => {\n  if (node) {\n    const { dir } =\n      findAncestorNode(\n        nodeStore,\n        node,\n        node => node.internal.type === `File`\n      ) || {}\n    return dir\n  }\n  return null\n}\n\nconst withBaseDir = dir => p => path.posix.join(dir, slash(p))\n\nconst findAncestorNode = (nodeStore, childNode, predicate) => {\n  let node = childNode\n  do {\n    if (predicate(node)) {\n      return node\n    }\n  } while ((node = node.parent && nodeStore.getNode(node.parent)))\n  return null\n}\n"],"file":"is-file.js"}