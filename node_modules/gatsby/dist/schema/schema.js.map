{"version":3,"sources":["../../src/schema/schema.js"],"names":["_","require","invariant","isSpecifiedScalarType","isIntrospectionType","defaultFieldResolver","assertValidName","getNamedType","apiRunner","report","addNodeInterfaceFields","addInferredType","addInferredTypes","findOne","findManyPaginated","getPagination","getSortInput","getFilterInput","isGatsbyType","GatsbyGraphQLTypeKind","buildSchema","schemaComposer","nodeStore","types","thirdPartySchemas","typeMapping","typeConflictReporter","parentSpan","updateSchemaComposer","schema","rebuildSchemaWithSitePage","typeComposer","getTC","processTypeComposer","module","exports","addTypes","addSetFieldsOnGraphQLNodeTypeFields","Promise","all","Array","from","values","map","addThirdPartySchemas","addCustomResolveFunctions","TypeComposer","hasInterface","addResolvers","addConvenienceChildrenFields","addTypeToRootQuery","forEach","typeOrTypeDef","addedTypes","addTypeDefs","error","reportParsingError","type","processAddedType","createTypeComposerFromGatsbyType","typeName","addAsComposer","checkIsAllowedTypeName","get","InterfaceTypeComposer","UnionTypeComposer","getResolveType","setResolveType","node","internal","addSchemaMustHaveType","name","endsWith","includes","kind","OBJECT","createTemp","config","interfaces","iface","getIFTC","getType","INPUT_OBJECT","InputTypeComposer","UNION","INTERFACE","console","warn","JSON","stringify","tc","getTypeName","result","nodes","getNodesByType","traceId","fields","addNestedFields","schemaQueryType","getQueryType","queryTC","getFields","Query","addFields","getTypeMap","Object","keys","isThirdPartyType","getFieldNames","fieldName","fieldType","getFieldType","extendField","add","intermediateSchema","createResolvers","resolvers","has","fieldConfig","hasField","originalFieldConfig","getFieldConfig","originalTypeName","toString","originalResolver","resolve","fieldTypeName","newConfig","args","source","context","info","removeInputTypeComposer","sortInputTC","filterInputTC","paginationTC","addResolver","filter","sort","skip","limit","childNodesByType","groupChildNodesByType","typeChildren","maxChildCount","maxBy","groupBy","c","parent","g","length","createChildrenField","createChildField","camelCase","path","nodeModel","getNodesByIds","ids","children","flatMap","getNode","undefined","value","queryName","queryNamePlural","getResolver","message","locations","codeFrameColumns","frame","body","start","linesAbove","linesBelow","panic"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst {\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  defaultFieldResolver,\n  assertValidName,\n  getNamedType,\n} = require(`graphql`)\nconst apiRunner = require(`../utils/api-runner-node`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { addNodeInterfaceFields } = require(`./types/node-interface`)\nconst { addInferredType, addInferredTypes } = require(`./infer`)\nconst { findOne, findManyPaginated } = require(`./resolvers`)\nconst { getPagination } = require(`./types/pagination`)\nconst { getSortInput } = require(`./types/sort`)\nconst { getFilterInput } = require(`./types/filter`)\nconst { isGatsbyType, GatsbyGraphQLTypeKind } = require(`./types/type-builders`)\n\nconst buildSchema = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  thirdPartySchemas,\n  typeMapping,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await updateSchemaComposer({\n    schemaComposer,\n    nodeStore,\n    types,\n    thirdPartySchemas,\n    typeMapping,\n    typeConflictReporter,\n    parentSpan,\n  })\n  // const { printSchema } = require(`graphql`)\n  const schema = schemaComposer.buildSchema()\n  // console.log(printSchema(schema))\n  return schema\n}\n\nconst rebuildSchemaWithSitePage = async ({\n  schemaComposer,\n  nodeStore,\n  typeMapping,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  const typeComposer = addInferredType({\n    schemaComposer,\n    typeComposer: schemaComposer.getTC(`SitePage`),\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await processTypeComposer({\n    schemaComposer,\n    typeComposer,\n    nodeStore,\n    parentSpan,\n  })\n  return schemaComposer.buildSchema()\n}\n\nmodule.exports = {\n  buildSchema,\n  rebuildSchemaWithSitePage,\n}\n\nconst updateSchemaComposer = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  typeMapping,\n  thirdPartySchemas,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await addTypes({ schemaComposer, parentSpan, types })\n  await addInferredTypes({\n    schemaComposer,\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await addSetFieldsOnGraphQLNodeTypeFields({\n    schemaComposer,\n    nodeStore,\n    parentSpan,\n  })\n  await Promise.all(\n    Array.from(schemaComposer.values()).map(typeComposer =>\n      processTypeComposer({\n        schemaComposer,\n        typeComposer,\n        nodeStore,\n        parentSpan,\n      })\n    )\n  )\n  await addThirdPartySchemas({ schemaComposer, thirdPartySchemas, parentSpan })\n  await addCustomResolveFunctions({ schemaComposer, parentSpan })\n}\n\nconst processTypeComposer = async ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n  parentSpan,\n}) => {\n  if (\n    typeComposer instanceof schemaComposer.TypeComposer &&\n    typeComposer.hasInterface(`Node`)\n  ) {\n    await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n    await addResolvers({ schemaComposer, typeComposer, parentSpan })\n    await addConvenienceChildrenFields({\n      schemaComposer,\n      typeComposer,\n      nodeStore,\n      parentSpan,\n    })\n    await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n  }\n}\n\nconst addTypes = ({ schemaComposer, types, parentSpan }) => {\n  types.forEach(typeOrTypeDef => {\n    if (typeof typeOrTypeDef === `string`) {\n      let addedTypes\n      try {\n        addedTypes = schemaComposer.addTypeDefs(typeOrTypeDef)\n      } catch (error) {\n        reportParsingError(error)\n      }\n      addedTypes.forEach(type =>\n        processAddedType({ schemaComposer, type, parentSpan })\n      )\n    } else if (isGatsbyType(typeOrTypeDef)) {\n      const type = createTypeComposerFromGatsbyType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        parentSpan,\n      })\n      if (type) {\n        processAddedType({ schemaComposer, type, parentSpan })\n      }\n    } else {\n      processAddedType({ schemaComposer, type: typeOrTypeDef, parentSpan })\n    }\n  })\n}\n\nconst processAddedType = ({ schemaComposer, type, parentSpan }) => {\n  const typeName = schemaComposer.addAsComposer(type)\n  checkIsAllowedTypeName(typeName)\n  const typeComposer = schemaComposer.get(typeName)\n  if (\n    typeComposer instanceof schemaComposer.InterfaceTypeComposer ||\n    typeComposer instanceof schemaComposer.UnionTypeComposer\n  ) {\n    if (!typeComposer.getResolveType()) {\n      typeComposer.setResolveType(node => node.internal.type)\n    }\n  }\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n}\n\nconst checkIsAllowedTypeName = name => {\n  invariant(\n    name !== `Node`,\n    `The GraphQL type \\`Node\\` is reserved for internal use.`\n  )\n  invariant(\n    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),\n    `GraphQL type names ending with \"FilterInput\" or \"SortInput\" are ` +\n      `reserved for internal use. Please rename \\`${name}\\`.`\n  )\n  invariant(\n    ![`Boolean`, `Date`, `Float`, `ID`, `Int`, `JSON`, `String`].includes(name),\n    `The GraphQL type \\`${name}\\` is reserved for internal use by ` +\n      `built-in scalar types.`\n  )\n  assertValidName(name)\n}\n\nconst createTypeComposerFromGatsbyType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n}) => {\n  switch (type.kind) {\n    case GatsbyGraphQLTypeKind.OBJECT: {\n      return schemaComposer.TypeComposer.createTemp({\n        ...type.config,\n        interfaces: () => {\n          if (type.config.interfaces) {\n            return type.config.interfaces.map(iface => {\n              if (typeof iface === `string`) {\n                return schemaComposer.getIFTC(iface).getType()\n              } else {\n                return iface\n              }\n            })\n          } else {\n            return []\n          }\n        },\n      })\n    }\n    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {\n      return schemaComposer.InputTypeComposer.createTemp(type.config)\n    }\n    case GatsbyGraphQLTypeKind.UNION: {\n      return schemaComposer.UnionTypeComposer.createTemp({\n        ...type.config,\n        types: () => {\n          if (type.types) {\n            return type.types.map(typeName =>\n              schemaComposer.getTC(typeName).getType()\n            )\n          } else {\n            return []\n          }\n        },\n      })\n    }\n    case GatsbyGraphQLTypeKind.INTERFACE: {\n      return schemaComposer.InterfaceTypeComposer.createTemp(type.config)\n    }\n    default: {\n      console.warn(`Illegal type definition: ${JSON.stringify(type.config)}`)\n      return null\n    }\n  }\n}\n\nconst addSetFieldsOnGraphQLNodeTypeFields = ({\n  schemaComposer,\n  nodeStore,\n  parentSpan,\n}) =>\n  Promise.all(\n    Array.from(schemaComposer.values()).map(async tc => {\n      if (\n        tc instanceof schemaComposer.TypeComposer &&\n        tc.hasInterface(`Node`)\n      ) {\n        const typeName = tc.getTypeName()\n        const result = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n          type: {\n            name: typeName,\n            nodes: nodeStore.getNodesByType(typeName),\n          },\n          traceId: `initial-setFieldsOnGraphQLNodeType`,\n          parentSpan: parentSpan,\n        })\n        if (result) {\n          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting\n          // nested fields with a path as property name, i.e.\n          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form\n          // `{ frontmatter: { published: 'Boolean' }}`\n          result.forEach(fields => tc.addNestedFields(fields))\n        }\n      }\n    })\n  )\n\nconst addThirdPartySchemas = ({\n  schemaComposer,\n  thirdPartySchemas,\n  parentSpan,\n}) => {\n  thirdPartySchemas.forEach(schema => {\n    const schemaQueryType = schema.getQueryType()\n    const queryTC = schemaComposer.TypeComposer.createTemp(schemaQueryType)\n    const fields = queryTC.getFields()\n    schemaComposer.Query.addFields(fields)\n\n    // Explicitly add the third-party schema's types, so they can be targeted\n    // in `createResolvers` API.\n    const types = schema.getTypeMap()\n    Object.keys(types).forEach(typeName => {\n      const type = types[typeName]\n      if (\n        type !== schemaQueryType &&\n        !isSpecifiedScalarType(type) &&\n        !isIntrospectionType(type)\n      ) {\n        type.isThirdPartyType = true\n        const typeComposer = schemaComposer.TypeComposer.createTemp(type)\n        typeComposer.getFieldNames().forEach(fieldName => {\n          const fieldType = typeComposer.getFieldType(fieldName)\n          if (getNamedType(fieldType) === schemaQueryType) {\n            typeComposer.extendField(fieldName, {\n              type: `Query`,\n            })\n          }\n        })\n        schemaComposer.add(typeComposer)\n      }\n    })\n  })\n}\n\nconst addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {\n  const intermediateSchema = schemaComposer.buildSchema()\n  const createResolvers = resolvers => {\n    Object.keys(resolvers).forEach(typeName => {\n      const fields = resolvers[typeName]\n      if (schemaComposer.has(typeName)) {\n        const tc = schemaComposer.getTC(typeName)\n        Object.keys(fields).forEach(fieldName => {\n          const fieldConfig = fields[fieldName]\n          if (tc.hasField(fieldName)) {\n            const originalFieldConfig = tc.getFieldConfig(fieldName)\n            const originalTypeName = originalFieldConfig.type.toString()\n            const originalResolver = originalFieldConfig.resolve\n            const fieldTypeName =\n              fieldConfig.type && fieldConfig.type.toString()\n            if (\n              !fieldTypeName ||\n              tc.getFieldType(fieldName) === fieldConfig.type.toString() ||\n              tc.getType().isThirdPartyType\n            ) {\n              const newConfig = {}\n              if (fieldConfig.type) {\n                newConfig.type = fieldConfig.type\n              }\n              if (fieldConfig.args) {\n                newConfig.args = fieldConfig.args\n              }\n              if (fieldConfig.resolve) {\n                newConfig.resolve = (source, args, context, info) =>\n                  fieldConfig.resolve(source, args, context, {\n                    ...info,\n                    originalResolver: originalResolver || defaultFieldResolver,\n                  })\n              }\n              tc.extendField(fieldName, newConfig)\n            } else if (fieldTypeName) {\n              report.warn(\n                `\\`createResolvers\\` passed resolvers for field ` +\n                  `\\`${typeName}.${fieldName}\\` with type \\`${fieldTypeName}\\`. ` +\n                  `Such a field with type \\`${originalTypeName}\\` already exists ` +\n                  `on the type. Use \\`createTypes\\` to override type fields.`\n              )\n            }\n          } else {\n            tc.addFields({ [fieldName]: fieldConfig })\n          }\n        })\n      } else {\n        report.warn(\n          `\\`createResolvers\\` passed resolvers for type \\`${typeName}\\` that ` +\n            `doesn't exist in the schema. Use \\`createTypes\\` to add the type ` +\n            `before adding resolvers.`\n        )\n      }\n    })\n  }\n  await apiRunner(`createResolvers`, {\n    schema: intermediateSchema,\n    createResolvers,\n    traceId: `initial-createResolvers`,\n    parentSpan: parentSpan,\n  })\n}\n\nconst addResolvers = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n\n  // TODO: We should have an abstraction for keeping and clearing\n  // related TypeComposers and InputTypeComposers.\n  // Also see the comment on the skipped test in `rebuild-schema`.\n  typeComposer.removeInputTypeComposer()\n\n  const sortInputTC = getSortInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const filterInputTC = getFilterInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const paginationTC = getPagination({\n    schemaComposer,\n    typeComposer,\n  })\n  typeComposer.addResolver({\n    name: `findOne`,\n    type: typeComposer,\n    args: {\n      ...filterInputTC.getFields(),\n    },\n    resolve: findOne(typeName),\n  })\n  typeComposer.addResolver({\n    name: `findManyPaginated`,\n    type: paginationTC,\n    args: {\n      filter: filterInputTC,\n      sort: sortInputTC,\n      skip: `Int`,\n      limit: `Int`,\n      // page: `Int`,\n      // perPage: { type: `Int`, defaultValue: 20 },\n    },\n    resolve: findManyPaginated(typeName),\n  })\n}\n\nconst addConvenienceChildrenFields = ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n}) => {\n  const nodes = nodeStore.getNodesByType(typeComposer.getTypeName())\n\n  const childNodesByType = groupChildNodesByType({ nodeStore, nodes })\n\n  Object.keys(childNodesByType).forEach(typeName => {\n    const typeChildren = childNodesByType[typeName]\n    const maxChildCount = _.maxBy(\n      _.values(_.groupBy(typeChildren, c => c.parent)),\n      g => g.length\n    ).length\n\n    if (maxChildCount > 1) {\n      typeComposer.addFields(createChildrenField(typeName))\n    } else {\n      typeComposer.addFields(createChildField(typeName))\n    }\n  })\n}\n\nfunction createChildrenField(typeName) {\n  return {\n    [_.camelCase(`children ${typeName}`)]: {\n      type: () => [typeName],\n      resolve(source, args, context) {\n        const { path } = context\n        return context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n      },\n    },\n  }\n}\n\nfunction createChildField(typeName) {\n  return {\n    [_.camelCase(`child ${typeName}`)]: {\n      type: () => typeName,\n      async resolve(source, args, context) {\n        const { path } = context\n        const result = await context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n        if (result && result.length > 0) {\n          return result[0]\n        } else {\n          return null\n        }\n      },\n    },\n  }\n}\n\nfunction groupChildNodesByType({ nodeStore, nodes }) {\n  return _(nodes)\n    .flatMap(node => (node.children || []).map(nodeStore.getNode))\n    .groupBy(node => (node.internal ? node.internal.type : undefined))\n    .value()\n}\n\nconst addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`\n  const queryName = _.camelCase(typeName)\n  const queryNamePlural = _.camelCase(`all ${typeName}`)\n  schemaComposer.Query.addFields({\n    [queryName]: typeComposer.getResolver(`findOne`),\n    [queryNamePlural]: typeComposer.getResolver(`findManyPaginated`),\n  })\n}\n\nconst reportParsingError = error => {\n  const { message, source, locations } = error\n\n  if (source && locations && locations.length) {\n    const report = require(`gatsby-cli/lib/reporter`)\n    const { codeFrameColumns } = require(`@babel/code-frame`)\n\n    const frame = codeFrameColumns(\n      source.body,\n      { start: locations[0] },\n      { linesAbove: 5, linesBelow: 5 }\n    )\n    report.panic(\n      `Encountered an error parsing the provided GraphQL type definitions:\\n` +\n        message +\n        `\\n\\n` +\n        frame +\n        `\\n`\n    )\n  } else {\n    throw error\n  }\n}\n"],"file":"schema.js"}