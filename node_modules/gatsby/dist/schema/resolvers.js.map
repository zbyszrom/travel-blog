{"version":3,"sources":["../../src/schema/resolvers.js"],"names":["systemPath","require","normalize","_","GraphQLList","getNullableType","getNamedType","findMany","typeName","args","context","info","nodeModel","runQuery","query","firstOnly","type","schema","getType","path","connectionType","findOne","filter","findManyPaginated","rp","result","paginate","skip","limit","distinct","source","field","edges","values","reduce","acc","node","value","getValueAtSelector","concat","Date","toISOString","Array","from","Set","sort","group","groupedResults","isArray","forEach","key","Object","keys","fieldValue","push","results","count","length","items","slice","hasNextPage","totalCount","map","item","i","arr","next","previous","nodes","pageInfo","obj","selector","selectors","split","a","undefined","link","by","fieldName","isPlainObject","returnType","getNodesByIds","ids","getNodeById","id","equals","eq","oneOf","in","operator","reduceRight","fileByPath","findLinkedFileNode","relativePath","fileLinkPath","resolve","parentFileNode","dir","linkedFileNode","find","getAllNodes","n","absolutePath","findRootNodeAncestor","Promise","all","module","exports"],"mappings":"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","sourcesContent":["const systemPath = require(`path`)\nconst normalize = require(`normalize-path`)\nconst _ = require(`lodash`)\nconst { GraphQLList, getNullableType, getNamedType } = require(`graphql`)\n\nconst findMany = typeName => ({ args, context, info }) =>\n  context.nodeModel.runQuery(\n    {\n      query: args,\n      firstOnly: false,\n      type: info.schema.getType(typeName),\n    },\n    { path: context.path, connectionType: typeName }\n  )\n\nconst findOne = typeName => ({ args, context, info }) =>\n  context.nodeModel.runQuery(\n    {\n      query: { filter: args },\n      firstOnly: true,\n      type: info.schema.getType(typeName),\n    },\n    { path: context.path }\n  )\n\nconst findManyPaginated = typeName => async rp => {\n  const result = await findMany(typeName)(rp)\n  return paginate(result, { skip: rp.args.skip, limit: rp.args.limit })\n}\n\nconst distinct = (source, args, context, info) => {\n  const { field } = args\n  const { edges } = source\n  const values = edges.reduce((acc, { node }) => {\n    const value = getValueAtSelector(node, field)\n    return value != null\n      ? acc.concat(value instanceof Date ? value.toISOString() : value)\n      : acc\n  }, [])\n  return Array.from(new Set(values)).sort()\n}\n\nconst group = (source, args, context, info) => {\n  const { field } = args\n  const { edges } = source\n  const groupedResults = edges.reduce((acc, { node }) => {\n    const value = getValueAtSelector(node, field)\n    const values = Array.isArray(value) ? value : [value]\n    values\n      .filter(value => value != null)\n      .forEach(value => {\n        const key = value instanceof Date ? value.toISOString() : value\n        acc[key] = (acc[key] || []).concat(node)\n      })\n    return acc\n  }, {})\n  return Object.keys(groupedResults)\n    .sort()\n    .reduce((acc, fieldValue) => {\n      acc.push({\n        ...paginate(groupedResults[fieldValue], args),\n        field,\n        fieldValue,\n      })\n      return acc\n    }, [])\n}\n\nconst paginate = (results = [], { skip = 0, limit }) => {\n  if (results === null) {\n    results = []\n  }\n\n  const count = results.length\n  const items = results.slice(skip, limit && skip + limit)\n\n  const hasNextPage = skip + limit < count\n\n  return {\n    totalCount: items.length,\n    edges: items.map((item, i, arr) => {\n      return {\n        node: item,\n        next: arr[i + 1],\n        previous: arr[i - 1],\n      }\n    }),\n    nodes: items,\n    pageInfo: {\n      hasNextPage,\n    },\n  }\n}\n\nconst getValueAtSelector = (obj, selector) => {\n  const selectors = Array.isArray(selector) ? selector : selector.split(`.`)\n  return selectors.reduce((acc, key) => {\n    if (acc && typeof acc === `object`) {\n      if (Array.isArray(acc)) {\n        return acc.map(a => a[key]).filter(a => a !== undefined)\n      }\n      return acc[key]\n    }\n    return undefined\n  }, obj)\n}\n\nconst link = ({ by, from }) => async (source, args, context, info) => {\n  const fieldValue = source && source[from || info.fieldName]\n\n  if (fieldValue == null || _.isPlainObject(fieldValue)) return fieldValue\n  if (\n    Array.isArray(fieldValue) &&\n    (fieldValue[0] == null || _.isPlainObject(fieldValue[0]))\n  ) {\n    return fieldValue\n  }\n\n  const returnType = getNullableType(info.returnType)\n  const type = getNamedType(returnType)\n\n  if (by === `id`) {\n    if (Array.isArray(fieldValue)) {\n      return context.nodeModel.getNodesByIds(\n        { ids: fieldValue, type: type },\n        { path: context.path }\n      )\n    } else {\n      return context.nodeModel.getNodeById(\n        { id: fieldValue, type: type },\n        { path: context.path }\n      )\n    }\n  }\n\n  const equals = value => {\n    return { eq: value }\n  }\n  const oneOf = value => {\n    return { in: value }\n  }\n  const operator = Array.isArray(fieldValue) ? oneOf : equals\n  args.filter = by.split(`.`).reduceRight((acc, key, i, { length }) => {\n    return {\n      [key]: i === length - 1 ? operator(acc) : acc,\n    }\n  }, fieldValue)\n\n  return context.nodeModel.runQuery(\n    { query: args, firstOnly: !(returnType instanceof GraphQLList), type },\n    { path: context.path }\n  )\n}\n\nconst fileByPath = (source, args, context, info) => {\n  let fieldValue = source[info.fieldName]\n\n  const isArray = getNullableType(info.returnType) instanceof GraphQLList\n\n  if (!fieldValue) {\n    return null\n  }\n\n  const findLinkedFileNode = async relativePath => {\n    // Use the parent File node to create the absolute path to\n    // the linked file.\n    const fileLinkPath = normalize(\n      systemPath.resolve(parentFileNode.dir, relativePath)\n    )\n\n    // Use that path to find the linked File node.\n    const linkedFileNode = _.find(\n      await context.nodeModel.getAllNodes({ type: `File` }),\n      n => n.absolutePath === fileLinkPath\n    )\n    return linkedFileNode\n  }\n\n  // Find the File node for this node (we assume the node is something\n  // like markdown which would be a child node of a File node).\n  const parentFileNode = context.nodeModel.findRootNodeAncestor(source)\n\n  // Find the linked File node(s)\n  if (isArray) {\n    return Promise.all(fieldValue.map(findLinkedFileNode))\n  } else {\n    return findLinkedFileNode(fieldValue)\n  }\n}\n\nmodule.exports = {\n  findManyPaginated,\n  findOne,\n  fileByPath,\n  link,\n  distinct,\n  group,\n}\n"],"file":"resolvers.js"}