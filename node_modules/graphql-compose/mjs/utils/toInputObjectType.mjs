function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-use-before-define, prefer-template */
import util from 'util';
import { GraphQLInputObjectType, GraphQLObjectType, GraphQLInterfaceType, isInputType, GraphQLUnionType, GraphQLList, GraphQLNonNull } from '../graphql';
import { TypeComposer } from '../TypeComposer';
import GenericType from '../type/generic';
export function toInputObjectType(typeComposer, opts = {}) {
  if (typeComposer.hasInputTypeComposer()) {
    return typeComposer.getInputTypeComposer();
  }

  const schemaComposer = typeComposer.constructor.schemaComposer;
  const prefix = opts.prefix || '';
  const postfix = opts.postfix || 'Input';
  const inputTypeName = `${prefix}${typeComposer.getTypeName()}${postfix}`;
  const inputTypeComposer = new schemaComposer.InputTypeComposer(new GraphQLInputObjectType({
    name: inputTypeName,
    fields: {}
  }));
  typeComposer.setInputTypeComposer(inputTypeComposer);
  const fieldNames = typeComposer.getFieldNames();
  const inputFields = {};
  fieldNames.forEach(fieldName => {
    const fieldOpts = _objectSpread({}, opts, {
      fieldName,
      outputTypeName: typeComposer.getTypeName()
    });

    const fc = typeComposer.getFieldConfig(fieldName);
    const inputType = convertInputObjectField(fc.type, fieldOpts, schemaComposer);

    if (inputType) {
      inputFields[fieldName] = {
        type: inputType,
        description: fc.description
      };
    }
  });
  inputTypeComposer.addFields(inputFields);
  return inputTypeComposer;
}
export function convertInputObjectField(field, opts, schemaComposer) {
  let fieldType = field;
  const wrappers = [];

  while (fieldType instanceof GraphQLList || fieldType instanceof GraphQLNonNull) {
    wrappers.unshift(fieldType.constructor);
    fieldType = fieldType.ofType;
  }

  if (fieldType instanceof GraphQLUnionType) {
    return null;
  }

  if (!isInputType(fieldType)) {
    if (fieldType instanceof GraphQLObjectType || fieldType instanceof GraphQLInterfaceType) {
      const typeOpts = {
        prefix: opts.prefix || '',
        postfix: opts.postfix || 'Input'
      };
      const tc = fieldType instanceof GraphQLObjectType ? new schemaComposer.TypeComposer(fieldType) : new schemaComposer.InterfaceTypeComposer(fieldType);
      fieldType = toInputObjectType(tc, typeOpts).getType();
    } else {
      // eslint-disable-next-line
      console.error(`graphql-compose: can not convert field '${opts.outputTypeName || ''}.${opts.fieldName || ''}' to InputType` + '\nIt should be GraphQLObjectType or GraphQLInterfaceType, but got \n' + util.inspect(fieldType, {
        depth: 2,
        colors: true
      }));
      fieldType = GenericType;
    }
  }

  const inputFieldType = wrappers.reduce((type, Wrapper) => new Wrapper(type), fieldType);
  return inputFieldType;
}